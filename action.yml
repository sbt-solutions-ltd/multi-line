name: 'SSH key multi-line'
description: 'Converts multi-line SSH Key into single line.'
inputs:
  ENVIRONMENT:  # id of input
    description: 'The environment to be build.'
    required: false
  SSH-KEY-DEV:  # id of input
    description: 'SSH Key to transform from multi to single line.'
    required: true
  SSH-KEY-TEST:  # id of input
    description: 'SSH Key to transform from multi to single line.'
    required: true
  SSH-KEY-STAGE:  # id of input
    description: 'SSH Key to transform from multi to single line.'
    required: true
  SSH-KEY-PROD:  # id of input
    description: 'SSH Key to transform from multi to single line.'
    required: true
  BASTION-IP-DEV:  # id of input
    description: 'The IP of the DEV Bastion host'
    required: false
  BASTION-IP-TEST:  # id of input
    description: 'The IP of the TEST Bastion host'
    required: false
  BASTION-IP-STAGE:  # id of input
    description: 'The IP of the STAGE Bastion host'
    required: false
  BASTION-IP-PROD:  # id of input
    description: 'The IP of the PROD Bastion host'
    required: false
  SG-ID-DEV:  # id of input
    description: 'The ID of the DEV Bastion host SSH security group'
    required: false
  SG-ID-TEST:  # id of input
    description: 'The ID of the TEST Bastion host SSH security group'
    required: false
  SG-ID-STAGE:  # id of input
    description: 'The ID of the STAGE Bastion host SSH security group'
    required: false
  SG-ID-PROD:  # id of input
    description: 'The ID of the PROD Bastion host SSH security group'
    required: false
  REGION-DEV:  # id of input
    description: 'The region for the development resources'
    required: false
  REGION-TEST:  # id of input
    description: 'The region for the testing resources'
    required: false
  REGION-STAGE:  # id of input
    description: 'The region for the staging resources'
    required: false
  REGION-PROD:  # id of input
    description: 'The region for the production resources'
    required: false
  SG-SCRIPT-URL-DEV:  # id of input
    description: 'The URL of the dev casino SG'
    required: false
  SG-SCRIPT-URL-TEST:  # id of input
    description: 'The URL of the testing casino SG'
    required: false
  SG-SCRIPT-URL-PROD:  # id of input
    description: 'The URL of the production casino SG'
    required: false
  AWS-BUCKET-KYC-DEV:  # id of input
    description: 'The S3 bucket KYC dev'
    required: false
  AWS-BUCKET-KYC-TEST:  # id of input
    description: 'The S3 bucket KYC testing'
    required: false
  AWS-BUCKET-KYC-STAGE:  # id of input
    description: 'The S3 bucket KYC staging'
    required: false
  AWS-BUCKET-KYC-PROD:  # id of input
    description: 'The S3 bucket KYC production'
    required: false
  S3-BUCKET-DEV:  # id of input
    description: 'The S3 bucket Strapi dev'
    required: false
  S3-BUCKET-TEST:  # id of input
    description: 'The S3 bucket Strapi testing'
    required: false
  S3-BUCKET-STAGE:  # id of input
    description: 'The S3 bucket Strapi staging'
    required: false
  S3-BUCKET-PROD:  # id of input
    description: 'The S3 bucket Strapi production'
    required: false
  DB-ADDR-DEV:  # id of input
    description: 'The DB dev address'
    required: false
  DB-ADDR-TEST:  # id of input
    description: 'The DB testing address'
    required: false
  DB-ADDR-STAGE:  # id of input
    description: 'The DB staging address'
    required: false
  DB-ADDR-PROD:  # id of input
    description: 'The DB production address'
    required: false
  SOFTSWISS-MP-REST-URL-DEV:  # id of input
    description: 'The Softswiss dev address'
    required: false
  SOFTSWISS-MP-REST-URL-TEST:  # id of input
    description: 'The Softswiss testing address'
    required: false
  SOFTSWISS-MP-REST-URL-STAGE:  # id of input
    description: 'The Softswiss staging address'
    required: false
  SOFTSWISS-MP-REST-URL-PROD:  # id of input
    description: 'The Softswiss production address'
    required: false
  KAFKA-BOOTSTRAP-SERVERS-DEV:  # id of input
    description: 'The DB dev address'
    required: false
  KAFKA-BOOTSTRAP-SERVERS-TEST:  # id of input
    description: 'The DB testing address'
    required: false
  KAFKA-BOOTSTRAP-SERVERS-STAGE:  # id of input
    description: 'The DB staging address'
    required: false
  KAFKA-BOOTSTRAP-SERVERS-PROD:  # id of input
    description: 'The DB production address'
    required: false
  CUSTOMER-IO-TRACK-DEV:  # id of input
    description: 'The dev API url for customer IO'
    required: false
  CUSTOMER-IO-RACK-TEST:  # id of input
    description: 'The test API url for customer IO'
    required: false
  CUSTOMER-IO-RACK-STAGE:  # id of input
    description: 'The staging API url for customer IO'
    required: false
  CUSTOMER-IO-TRACK-PROD:  # id of input
    description: 'The prod API url for customer IO'
    required: false
outputs:
  SSH-KEY-SINGLE:
    description: "Single line SSH key"
    value: ${{ steps.environment_check.outputs.KEY }}
  ENV_BRANCH:
    description: "The branch tag to be applied"
    value: ${{ steps.environment_check.outputs.ENV_BRANCH }}
  ENV_REGION:
    description: "The region to create the resources in"
    value: ${{ steps.environment_check.outputs.ENV_REGION }}
  BASTION_IP:
    description: "The IP of the Bastion host"
    value: ${{ steps.environment_check.outputs.BASTION_IP }}
  SG_ID:
    description: "The ID of the Bastion host SSH security group"
    value: ${{ steps.environment_check.outputs.SG_ID }}
  KAFKA-BOOTSTRAP-SERVERS:
    description: "The DB production address"
    value: ${{ steps.environment_check.outputs.KAFKA-BOOTSTRAP-SERVERS }}
  SOFTSWISS-MP-REST-URL:
    description: "The Softswiss address"
    value: ${{ steps.environment_check.outputs.SOFTSWISS-MP-REST-URL }}
  DB-ADDR:
    description: "The DB address"
    value: ${{ steps.environment_check.outputs.DB-ADDR }}
  S3-BUCKET:
    description: "The S3 bucket for Strapi"
    value: ${{ steps.environment_check.outputs.S3-BUCKET }}
  AWS-BUCKET-KYC:
    description: "The S3 KYC bucket"
    value: ${{ steps.environment_check.outputs.AWS-BUCKET-KYC }}
  SG-SCRIPT-URL:
    description: "The URL of the casino SG"
    value: ${{ steps.environment_check.outputs.SG-SCRIPT-URL }}
  CUSTOMER-IO-TRACK:
    description: "The API url for customer IO"
    value: ${{ steps.environment_check.outputs.CUSTOMER_IO_TRACK }}
runs:
  using: "composite"
  steps:
    - name: Check if ENVIRONMENT variable is present
      id: env_check
      run: |
        if [ "${{ inputs.ENVIRONMENT }}" == "testing" ]; then
          present="true"
          echo "present=true" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "production" ]; then
          present="true"
          echo "present=true" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "staging" ]; then
          present="true"
          echo "present=true" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "development" ]; then
          present="true"
          echo "present=true" >> $GITHUB_OUTPUT
        else
          present="false"
          echo "present=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Set environment variables
      id: environment_check
      run: |
        if [ "${{ inputs.ENVIRONMENT }}" == "testing" ] && ([ "${{ github.ref }}" == refs/heads/master ] || [ "${{ github.ref }}" == refs/heads/main ]); then
           multi_line="${{ inputs.SSH-KEY-TEST }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "production" ] && ([ "${{ github.ref }}" == refs/heads/master ] || [ "${{ github.ref }}" == refs/heads/main ]); then
           multi_line="${{ inputs.SSH-KEY-PROD }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "staging" ] && ([ "${{ github.ref }}" == refs/heads/master ] || [ "${{ github.ref }}" == refs/heads/main ]); then
           multi_line="${{ inputs.SSH-KEY-STAGE }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.ENVIRONMENT }}" == "development" ] && ([ "${{ github.ref }}" == refs/heads/master ] || [ "${{ github.ref }}" == refs/heads/main ]); then
           multi_line="${{ inputs.SSH-KEY-DEV }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        fi
        if [ "${{ github.ref }}" == "refs/heads/stage" ] && [ "${{ steps.env_check.outputs.present }}" == "false" ]; then
           echo "ENV_BRANCH=stage" >> $GITHUB_OUTPUT
           echo "ENV_REGION=${{ inputs.REGION-STAGE }}" >> $GITHUB_OUTPUT
           echo "BASTION_IP=${{ inputs.BASTION-IP-STAGE }}" >> $GITHUB_OUTPUT
           echo "SG_ID=${{ inputs.SG-ID-STAGE }}" >> $GITHUB_OUTPUT
           echo "SG-SCRIPT-URL=${{ inputs.SG-SCRIPT-URL-STAGE }}" >> $GITHUB_OUTPUT
           echo "AWS-BUCKET-KYC=${{ inputs.AWS-BUCKET-KYC-STAGE }}" >> $GITHUB_OUTPUT
           echo "S3-BUCKET=${{ inputs.S3-BUCKET-STAGE }}" >> $GITHUB_OUTPUT
           echo "DB-ADDR=${{ inputs.DB-ADDR-STAGE }}" >> $GITHUB_OUTPUT
           echo "SOFTSWISS-MP-REST-URL=${{ inputs.SOFTSWISS-MP-REST-URL-STAGE }}" >> $GITHUB_OUTPUT
           echo "KAFKA-BOOTSTRAP-SERVERS=${{ inputs.KAFKA-BOOTSTRAP-SERVERS-STAGE }}" >> $GITHUB_OUTPUT
           echo "CUSTOMER_IO_TRACK=${{ inputs.CUSTOMER-IO-TRACK-STAGE }}" >> $GITHUB_OUTPUT
           multi_line="${{ inputs.SSH-KEY-STAGE }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/testing" ] && [ "${{ steps.env_check.outputs.present }}" == "false" ]; then
           echo "ENV_BRANCH=test" >> $GITHUB_OUTPUT
           echo "ENV_REGION=${{ inputs.REGION-TEST }}" >> $GITHUB_OUTPUT
           echo "BASTION_IP=${{ inputs.BASTION-IP-TEST }}" >> $GITHUB_OUTPUT
           echo "SG_ID=${{ inputs.SG-ID-TEST }}" >> $GITHUB_OUTPUT
           echo "SG-SCRIPT-URL=${{ inputs.SG-SCRIPT-URL-TEST }}" >> $GITHUB_OUTPUT
           echo "AWS-BUCKET-KYC=${{ inputs.AWS-BUCKET-KYC-TEST }}" >> $GITHUB_OUTPUT
           echo "S3-BUCKET=${{ inputs.S3-BUCKET-TEST }}" >> $GITHUB_OUTPUT
           echo "DB-ADDR=${{ inputs.DB-ADDR-TEST }}" >> $GITHUB_OUTPUT
           echo "SOFTSWISS-MP-REST-URL=${{ inputs.SOFTSWISS-MP-REST-URL-TEST }}" >> $GITHUB_OUTPUT
           echo "KAFKA-BOOTSTRAP-SERVERS=${{ inputs.KAFKA-BOOTSTRAP-SERVERS-TEST }}" >> $GITHUB_OUTPUT
           echo "CUSTOMER_IO_TRACK=${{ inputs.CUSTOMER-IO-TRACK-TEST }}" >> $GITHUB_OUTPUT
           multi_line="${{ inputs.SSH-KEY-TEST }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/production" ] && [ "${{ steps.env_check.outputs.present }}" == "false" ]; then
           echo "ENV_BRANCH=prod" >> $GITHUB_OUTPUT
           echo "ENV_REGION=${{ inputs.REGION-PROD }}" >> $GITHUB_OUTPUT
           echo "BASTION_IP=${{ inputs.BASTION-IP-PROD }}" >> $GITHUB_OUTPUT
           echo "SG_ID=${{ inputs.SG-ID-PROD }}" >> $GITHUB_OUTPUT
           echo "SG-SCRIPT-URL=${{ inputs.SG-SCRIPT-URL-PROD }}" >> $GITHUB_OUTPUT
           echo "AWS-BUCKET-KYC=${{ inputs.AWS-BUCKET-KYC-PROD }}" >> $GITHUB_OUTPUT
           echo "S3-BUCKET=${{ inputs.S3-BUCKET-PROD }}" >> $GITHUB_OUTPUT
           echo "DB-ADDR=${{ inputs.DB-ADDR-PROD }}" >> $GITHUB_OUTPUT
           echo "SOFTSWISS-MP-REST-URL=${{ inputs.SOFTSWISS-MP-REST-URL-PROD }}" >> $GITHUB_OUTPUT
           echo "KAFKA-BOOTSTRAP-SERVERS=${{ inputs.KAFKA-BOOTSTRAP-SERVERS-PROD }}" >> $GITHUB_OUTPUT
           echo "CUSTOMER_IO_TRACK=${{ inputs.CUSTOMER-IO-TRACK-PROD }}" >> $GITHUB_OUTPUT
           multi_line="${{ inputs.SSH-KEY-PROD }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        elif [ "${{ steps.env_check.outputs.present }}" == "false" ]; then
           echo "ENV_BRANCH=dev" >> $GITHUB_OUTPUT
           echo "ENV_REGION=${{ inputs.REGION-DEV }}" >> $GITHUB_OUTPUT
           echo "BASTION_IP=${{ inputs.BASTION-IP-DEV }}" >> $GITHUB_OUTPUT
           echo "SG_ID=${{ inputs.SG-ID-DEV }}" >> $GITHUB_OUTPUT
           echo "SG-SCRIPT-URL=${{ inputs.SG-SCRIPT-URL-DEV }}" >> $GITHUB_OUTPUT
           echo "AWS-BUCKET-KYC=${{ inputs.AWS-BUCKET-KYC-DEV }}" >> $GITHUB_OUTPUT
           echo "S3-BUCKET=${{ inputs.S3-BUCKET-DEV }}" >> $GITHUB_OUTPUT
           echo "DB-ADDR=${{ inputs.DB-ADDR-DEV }}" >> $GITHUB_OUTPUT
           echo "SOFTSWISS-MP-REST-URL=${{ inputs.SOFTSWISS-MP-REST-URL-DEV }}" >> $GITHUB_OUTPUT
           echo "KAFKA-BOOTSTRAP-SERVERS=${{ inputs.KAFKA-BOOTSTRAP-SERVERS-DEV }}" >> $GITHUB_OUTPUT
           echo "CUSTOMER_IO_TRACK=${{ inputs.CUSTOMER-IO-TRACK-DEV }}" >> $GITHUB_OUTPUT
           multi_line="${{ inputs.SSH-KEY-DEV }}"
           multi_line="${multi_line//$'\n'/'%0A'}"
           multi_line="${multi_line//$'\r'/'%0D'}"
           echo "KEY=$multi_line" >> $GITHUB_OUTPUT
        fi
      shell: bash

