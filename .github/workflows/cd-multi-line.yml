# Name of the Workflow
name: CD TEST

on:
  push:
    branches:
      - 'testing'
  #Start workflow manually only from main/master, stage and production branches only.
  workflow_dispatch:
    branches:
      - 'testing'
    inputs:
      environment:
        description: 'The environment Terraform should build: development, testing or production'
        type: choice
        options:
        - development
        - testing
        - production
        required: false
        default: 'development'


jobs:
  ssh_key_convert:
    runs-on: ubuntu-latest
    name: A job to pass environment variables based on branches and Terraform environment
    steps:
      - uses: actions/checkout@v2

       # Calling the action
      - id: envs
        uses: zerodt-io/multi-line@v1.5
        with:
          SSH-KEY-DEV: key-dev
          SSH-KEY-TEST: key-test
          SSH-KEY-STAGE: key-stage
          SSH-KEY-PROD: key-prod
          SG-ID-DEV: sg-dev
          SG-ID-TEST: ${{ secrets.SG_ID_TEST }}
          SG-ID-STAGE: sg-stage
          SG-ID-PROD: sg-prod
          BASTION-IP-DEV: bastion-ip-dev
          BASTION-IP-TEST: bastion-ip-test
          BASTION-IP-STAGE: bastion-ip-stage
          BASTION-IP-PROD: bastion-ip-prod
          REGION-DEV: us-east-2
          REGION-TEST: us-east-2
          REGION-STAGE: us-east-1
          REGION-PROD: eu-north-1

       # The outputs the action produces
      - run: |
          echo "New key is ${{ steps.envs.outputs.SSH-KEY-SINGLE }}"
          echo "New branch is ${{ steps.envs.outputs.ENV_BRANCH }}"
          echo "New region is ${{ steps.envs.outputs.ENV_REGION }}"
          echo "New IP is ${{ steps.envs.outputs.BASTION_IP }}"
          echo "New SG ID is ${{ steps.envs.outputs.SG_ID }}"
        shell: bash

      #Login to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.envs.outputs.ENV_REGION }}

       #Update AWS SG to allow the GitHub runner to SSH to the bastion host
      - name: Update AWS SG with runner IP
        env:
          SG_ID: ${{ steps.envs.outputs.SG_ID }}
        run: |
          IP=`curl ifconfig.me`
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=$IP/32,Description=\"SSH access from Github runner.\"}]"
